#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tt.Framework.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TtTakeHome")]
	public partial class PersistenceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFileInfo(FileInfo instance);
    partial void UpdateFileInfo(FileInfo instance);
    partial void DeleteFileInfo(FileInfo instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertFileTransaction(FileTransaction instance);
    partial void UpdateFileTransaction(FileTransaction instance);
    partial void DeleteFileTransaction(FileTransaction instance);
    #endregion
		
		public PersistenceDataContext() : 
				base(global::Tt.Framework.Properties.Settings.Default.TtTakeHomeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PersistenceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FileInfo> FileInfos
		{
			get
			{
				return this.GetTable<FileInfo>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<FileTransaction> FileTransactions
		{
			get
			{
				return this.GetTable<FileTransaction>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileInfo")]
	public partial class FileInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Customer;
		
		private string _Filename;
		
		private string _LocalFilePath;
		
		private System.DateTime _CreatedOn;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _ProcessedOn;
		
		private EntitySet<FileTransaction> _FileTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnLocalFilePathChanging(string value);
    partial void OnLocalFilePathChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnProcessedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessedOnChanged();
    #endregion
		
		public FileInfo()
		{
			this._FileTransactions = new EntitySet<FileTransaction>(new Action<FileTransaction>(this.attach_FileTransactions), new Action<FileTransaction>(this.detach_FileTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filename", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocalFilePath", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string LocalFilePath
		{
			get
			{
				return this._LocalFilePath;
			}
			set
			{
				if ((this._LocalFilePath != value))
				{
					this.OnLocalFilePathChanging(value);
					this.SendPropertyChanging();
					this._LocalFilePath = value;
					this.SendPropertyChanged("LocalFilePath");
					this.OnLocalFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> ProcessedOn
		{
			get
			{
				return this._ProcessedOn;
			}
			set
			{
				if ((this._ProcessedOn != value))
				{
					this.OnProcessedOnChanging(value);
					this.SendPropertyChanging();
					this._ProcessedOn = value;
					this.SendPropertyChanged("ProcessedOn");
					this.OnProcessedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileInfo_FileTransaction", Storage="_FileTransactions", ThisKey="Id", OtherKey="FileId")]
		public EntitySet<FileTransaction> FileTransactions
		{
			get
			{
				return this._FileTransactions;
			}
			set
			{
				this._FileTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileTransactions(FileTransaction entity)
		{
			this.SendPropertyChanging();
			entity.FileInfo = this;
		}
		
		private void detach_FileTransactions(FileTransaction entity)
		{
			this.SendPropertyChanging();
			entity.FileInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _TransactionKey;
		
		private System.DateTime _TransactionDate;
		
		private int _NetworkId;
		
		private int _ExchangeId;
		
		private int _TransactionType;
		
		private string _Username;
		
		private string _Product;
		
		private int _Quantity;
		
		private System.DateTime _CreatedOn;
		
		private EntitySet<FileTransaction> _FileTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTransactionKeyChanging(string value);
    partial void OnTransactionKeyChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnNetworkIdChanging(int value);
    partial void OnNetworkIdChanged();
    partial void OnExchangeIdChanging(int value);
    partial void OnExchangeIdChanged();
    partial void OnTransactionTypeChanging(int value);
    partial void OnTransactionTypeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnProductChanging(string value);
    partial void OnProductChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    #endregion
		
		public Transaction()
		{
			this._FileTransactions = new EntitySet<FileTransaction>(new Action<FileTransaction>(this.attach_FileTransactions), new Action<FileTransaction>(this.detach_FileTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionKey", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TransactionKey
		{
			get
			{
				return this._TransactionKey;
			}
			set
			{
				if ((this._TransactionKey != value))
				{
					this.OnTransactionKeyChanging(value);
					this.SendPropertyChanging();
					this._TransactionKey = value;
					this.SendPropertyChanged("TransactionKey");
					this.OnTransactionKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkId", DbType="Int NOT NULL")]
		public int NetworkId
		{
			get
			{
				return this._NetworkId;
			}
			set
			{
				if ((this._NetworkId != value))
				{
					this.OnNetworkIdChanging(value);
					this.SendPropertyChanging();
					this._NetworkId = value;
					this.SendPropertyChanged("NetworkId");
					this.OnNetworkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExchangeId", DbType="Int NOT NULL")]
		public int ExchangeId
		{
			get
			{
				return this._ExchangeId;
			}
			set
			{
				if ((this._ExchangeId != value))
				{
					this.OnExchangeIdChanging(value);
					this.SendPropertyChanging();
					this._ExchangeId = value;
					this.SendPropertyChanged("ExchangeId");
					this.OnExchangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="Int NOT NULL")]
		public int TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this.OnProductChanging(value);
					this.SendPropertyChanging();
					this._Product = value;
					this.SendPropertyChanged("Product");
					this.OnProductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_FileTransaction", Storage="_FileTransactions", ThisKey="Id", OtherKey="TransactionId")]
		public EntitySet<FileTransaction> FileTransactions
		{
			get
			{
				return this._FileTransactions;
			}
			set
			{
				this._FileTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileTransactions(FileTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = this;
		}
		
		private void detach_FileTransactions(FileTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileTransaction")]
	public partial class FileTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _FileId;
		
		private System.Guid _TransactionId;
		
		private EntityRef<FileInfo> _FileInfo;
		
		private EntityRef<Transaction> _Transaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnFileIdChanging(System.Guid value);
    partial void OnFileIdChanged();
    partial void OnTransactionIdChanging(System.Guid value);
    partial void OnTransactionIdChanged();
    #endregion
		
		public FileTransaction()
		{
			this._FileInfo = default(EntityRef<FileInfo>);
			this._Transaction = default(EntityRef<Transaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FileId
		{
			get
			{
				return this._FileId;
			}
			set
			{
				if ((this._FileId != value))
				{
					if (this._FileInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileIdChanging(value);
					this.SendPropertyChanging();
					this._FileId = value;
					this.SendPropertyChanged("FileId");
					this.OnFileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileInfo_FileTransaction", Storage="_FileInfo", ThisKey="FileId", OtherKey="Id", IsForeignKey=true)]
		public FileInfo FileInfo
		{
			get
			{
				return this._FileInfo.Entity;
			}
			set
			{
				FileInfo previousValue = this._FileInfo.Entity;
				if (((previousValue != value) 
							|| (this._FileInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileInfo.Entity = null;
						previousValue.FileTransactions.Remove(this);
					}
					this._FileInfo.Entity = value;
					if ((value != null))
					{
						value.FileTransactions.Add(this);
						this._FileId = value.Id;
					}
					else
					{
						this._FileId = default(System.Guid);
					}
					this.SendPropertyChanged("FileInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_FileTransaction", Storage="_Transaction", ThisKey="TransactionId", OtherKey="Id", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.FileTransactions.Remove(this);
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.FileTransactions.Add(this);
						this._TransactionId = value.Id;
					}
					else
					{
						this._TransactionId = default(System.Guid);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
